import numpy as np
class RobotController:
    def __init__(self,limiter=None):
        self.dt = 0.02
        self.p_x_e = 0
        self.p_y_e = 0
        self.p_z_e = 0
        self.phi_e = 0
        self.theta_e = 0
        self.psi_e = 0
        self.v_x_e =0
        self.v_y_e = 0
        self.v_z_e = 0
        self.w_x_e = 0
        self.w_y_e = 0
        self.w_z_e = 0
        self.f_z_e = 981/200
        tau_x_e = 0
        tau_y_e = 0
        tau_z_e = 0
        
        self.A = np.array([[ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  1.  ,  0.  ,  0.  ,
                             0.  ,  0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  1.  ,  0.  ,
                             0.  ,  0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  1.  ,
                             0.  ,  0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                             1.  , -0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                             0.  ,  1.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                            -0.  ,  0.  ,  1.  ],
                           [ 0.  ,  0.  ,  0.  ,  9.81,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                             0.  ,  0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  , -9.81,  0.  ,  0.  ,  0.  ,  0.  ,
                             0.  ,  0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  , -0.  , -0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                             0.  ,  0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                             0.  , -0.  , -0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                             0.  ,  0.  ,  0.  ],
                           [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
                             0.  ,  0.  ,  0.  ]])
        self.B = np.array([[  0.       ,   0.       ,   0.       ,   0.       ],
                           [  0.       ,   0.       ,   0.       ,   0.       ],
                           [  0.       ,   0.       ,   0.       ,   0.       ],
                           [  0.       ,   0.       ,   0.       ,   0.       ],
                           [  0.       ,   0.       ,   0.       ,   0.       ],
                           [  0.       ,   0.       ,   0.       ,   0.       ],
                           [  0.       ,   0.       ,   0.       ,   0.       ],
                           [  0.       ,   0.       ,   0.       ,  -0.       ],
                           [  0.       ,   0.       ,   0.       ,   2.       ],
                           [434.7826087,   0.       ,   0.       ,   0.       ],
                           [  0.       , 434.7826087,   0.       ,   0.       ],
                           [  0.       ,   0.       , 250.       ,   0.       ]])
        self.C = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]])
        self.K = np.array([[ 1.00000000e+00, -5.91020886e-16, -1.25814708e-15,
                             5.46213218e+00,  1.76229931e-15, -5.69532392e-17,
                             1.45381723e+00,  2.69229892e-16,  3.81469288e-15,
                             1.01248497e+00,  1.27616488e-16, -1.18638883e-16],
                           [ 8.79791271e-16, -1.00000000e+00, -5.35296218e-16,
                             8.08090942e-15,  5.46213218e+00, -4.47268163e-15,
                             1.11998778e-15, -1.45381723e+00,  3.46985310e-16,
                             1.27616488e-16,  1.01248497e+00, -2.43821418e-15],
                           [-1.16321987e-15,  2.67174384e-15, -4.79433508e-16,
                            -4.29109434e-15, -6.07612931e-15,  1.00000000e+00,
                            -3.96767990e-15,  1.63169294e-15, -4.51490105e-17,
                            -6.82173576e-17, -1.40197315e-15,  1.00399203e+00],
                           [ 7.76704736e-15, -1.04233815e-15,  1.00000000e+00,
                             7.89327558e-15,  3.32452346e-15,  1.91211685e-16,
                             3.56753918e-15, -1.06674758e-15,  1.41421356e+00,
                             1.75475873e-17,  1.59613243e-18, -3.61192084e-19]])
        self.L = np.array([[ 4.16261715,  0.        ,  0.        ,  1.02922638,  0.        ,
                             0.        ],
                           [ 0.        ,  4.16261715,  0.        ,  0.        , -1.02922638,
                             0.        ],
                           [ 0.        ,  0.        ,  1.73205081,  0.        ,  0.        ,
                             0.        ],
                           [ 1.02922638,  0.        ,  0.        ,  1.30533493,  0.        ,
                             0.        ],
                           [ 0.        , -1.02922638,  0.        ,  0.        ,  1.30533493,
                             0.        ],
                           [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                             1.73205081],
                           [ 8.69334425,  0.        ,  0.        ,  5.15576905,  0.        ,
                             0.        ],
                           [ 0.        ,  8.69334425,  0.        ,  0.        , -5.15576905,
                             0.        ],
                           [ 0.        ,  0.        ,  1.        ,  0.        ,  0.        ,
                             0.        ],
                           [ 0.47199149,  0.        ,  0.        ,  0.88160311,  0.        ,
                             0.        ],
                           [ 0.        , -0.47199149,  0.        ,  0.        ,  0.88160311,
                             0.        ],
                           [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                             1.        ]])
        self.limiter = limiter

    def get_color(self):
        return [0., 1., 0.]

    def reset(self, xhat=None):
        # Initialize the state estimate
        if xhat is None:
            self.xhat = np.zeros(12)
        else:
            self.xhat = xhat

    def run(self, pos, rpy, linvel, angvel, pos_ring, is_last_ring, pos_others):
        x_des = np.array([[pos[0]-self.p_x_e],[pos[1]-self.p_y_e],[pos[2]-self.p_z_e],\
                          [rpy[0]-self.phi_e],[rpy[1]-self.theta_e],[rpy[2]-self.psi_e],\
                          [linvel[0]-self.v_x_e],[linvel[1]-self.v_y_e],[linvel[2]-self.v_z_e],\
                         [angvel[0]-self.w_x_e],[angvel[1]-self.w_y_e],[angvel[2]-self.w_z_e]])
        
        u = -self.K @ (self.xhat - x_des)
        tau_x = u[0]+self.tau_x_e
        tau_y = u[1]+self.tau_y_e
        tau_z = u[2]+self.tau_z_e
        f_z = u[3]+self.f_z_e
        
        y = np.array([[pos[0]-self.p_x_e],[pos[1]-self.p_y_e],[pos[2]-self.p_z_e],\
                    [rpy[0]-self.phi_e],[rpy[1]-self.theta_e],[rpy[2]-self.psi_e]])
        self.xhat += self.dt * (self.A @ self.xhat + self.B @ u - self.L @ (self.C @ self.xhat - y))
        return tau_x, tau_y, tau_z, f_z